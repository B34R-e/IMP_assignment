{"ast":null,"code":"import cv from \"opencv.js\"; // Make sure to include OpenCV.js in your project\n\nconst processImage = (imageData, sigma) => {\n  // Convert image data to grayscale\n  const img = cv.matFromArray(imageData, cv.CV_8UC1);\n\n  // Convert image to frequency domain\n  const f = new cv.Mat();\n  cv.dft(img, f, cv.DFT_COMPLEX_OUTPUT);\n\n  // Generate Gaussian lowpass filter\n  const rows = img.rows;\n  const cols = img.cols;\n  const gaussianFilter = cv.Mat.ones(rows, cols, cv.CV_32FC2);\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const x = j - cols / 2;\n      const y = i - rows / 2;\n      gaussianFilter.data32F[i * cols * 2 + j * 2] = Math.exp(-(x * x + y * y) / (2 * sigma * sigma));\n      gaussianFilter.data32F[i * cols * 2 + j * 2 + 1] = 0;\n    }\n  }\n\n  // Apply filter in frequency domain\n  const filteredF = new cv.Mat();\n  cv.mulSpectrums(f, gaussianFilter, filteredF, 0);\n\n  // Inverse FFT\n  const filteredImage = new cv.Mat();\n  cv.dft(filteredF, filteredImage, cv.DFT_INVERSE | cv.DFT_REAL_OUTPUT);\n\n  // Convert to Uint8Array for display\n  const outputImageData = new Uint8Array(filteredImage.data);\n\n  // Clean up\n  img.delete();\n  f.delete();\n  gaussianFilter.delete();\n  filteredF.delete();\n  return new ImageData(outputImageData, cols, rows);\n};\nexport default processImage;","map":{"version":3,"names":["cv","processImage","imageData","sigma","img","matFromArray","CV_8UC1","f","Mat","dft","DFT_COMPLEX_OUTPUT","rows","cols","gaussianFilter","ones","CV_32FC2","i","j","x","y","data32F","Math","exp","filteredF","mulSpectrums","filteredImage","DFT_INVERSE","DFT_REAL_OUTPUT","outputImageData","Uint8Array","data","delete","ImageData"],"sources":["D:/IMP Project/src/processing-function/smoothingImgUsingGaussian.js"],"sourcesContent":["import cv from \"opencv.js\"; // Make sure to include OpenCV.js in your project\r\n\r\nconst processImage = (imageData, sigma) => {\r\n  // Convert image data to grayscale\r\n  const img = cv.matFromArray(imageData, cv.CV_8UC1);\r\n\r\n  // Convert image to frequency domain\r\n  const f = new cv.Mat();\r\n  cv.dft(img, f, cv.DFT_COMPLEX_OUTPUT);\r\n\r\n  // Generate Gaussian lowpass filter\r\n  const rows = img.rows;\r\n  const cols = img.cols;\r\n  const gaussianFilter = cv.Mat.ones(rows, cols, cv.CV_32FC2);\r\n  for (let i = 0; i < rows; i++) {\r\n    for (let j = 0; j < cols; j++) {\r\n      const x = j - cols / 2;\r\n      const y = i - rows / 2;\r\n      gaussianFilter.data32F[i * cols * 2 + j * 2] = Math.exp(\r\n        -(x * x + y * y) / (2 * sigma * sigma)\r\n      );\r\n      gaussianFilter.data32F[i * cols * 2 + j * 2 + 1] = 0;\r\n    }\r\n  }\r\n\r\n  // Apply filter in frequency domain\r\n  const filteredF = new cv.Mat();\r\n  cv.mulSpectrums(f, gaussianFilter, filteredF, 0);\r\n\r\n  // Inverse FFT\r\n  const filteredImage = new cv.Mat();\r\n  cv.dft(filteredF, filteredImage, cv.DFT_INVERSE | cv.DFT_REAL_OUTPUT);\r\n\r\n  // Convert to Uint8Array for display\r\n  const outputImageData = new Uint8Array(filteredImage.data);\r\n\r\n  // Clean up\r\n  img.delete();\r\n  f.delete();\r\n  gaussianFilter.delete();\r\n  filteredF.delete();\r\n\r\n  return new ImageData(outputImageData, cols, rows);\r\n};\r\n\r\nexport default processImage;\r\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,WAAW,CAAC,CAAC;;AAE5B,MAAMC,YAAY,GAAGA,CAACC,SAAS,EAAEC,KAAK,KAAK;EACzC;EACA,MAAMC,GAAG,GAAGJ,EAAE,CAACK,YAAY,CAACH,SAAS,EAAEF,EAAE,CAACM,OAAO,CAAC;;EAElD;EACA,MAAMC,CAAC,GAAG,IAAIP,EAAE,CAACQ,GAAG,CAAC,CAAC;EACtBR,EAAE,CAACS,GAAG,CAACL,GAAG,EAAEG,CAAC,EAAEP,EAAE,CAACU,kBAAkB,CAAC;;EAErC;EACA,MAAMC,IAAI,GAAGP,GAAG,CAACO,IAAI;EACrB,MAAMC,IAAI,GAAGR,GAAG,CAACQ,IAAI;EACrB,MAAMC,cAAc,GAAGb,EAAE,CAACQ,GAAG,CAACM,IAAI,CAACH,IAAI,EAAEC,IAAI,EAAEZ,EAAE,CAACe,QAAQ,CAAC;EAC3D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,EAAEK,CAAC,EAAE,EAAE;IAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,EAAEK,CAAC,EAAE,EAAE;MAC7B,MAAMC,CAAC,GAAGD,CAAC,GAAGL,IAAI,GAAG,CAAC;MACtB,MAAMO,CAAC,GAAGH,CAAC,GAAGL,IAAI,GAAG,CAAC;MACtBE,cAAc,CAACO,OAAO,CAACJ,CAAC,GAAGJ,IAAI,GAAG,CAAC,GAAGK,CAAC,GAAG,CAAC,CAAC,GAAGI,IAAI,CAACC,GAAG,CACrD,EAAEJ,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,CAAC,IAAI,CAAC,GAAGhB,KAAK,GAAGA,KAAK,CACvC,CAAC;MACDU,cAAc,CAACO,OAAO,CAACJ,CAAC,GAAGJ,IAAI,GAAG,CAAC,GAAGK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IACtD;EACF;;EAEA;EACA,MAAMM,SAAS,GAAG,IAAIvB,EAAE,CAACQ,GAAG,CAAC,CAAC;EAC9BR,EAAE,CAACwB,YAAY,CAACjB,CAAC,EAAEM,cAAc,EAAEU,SAAS,EAAE,CAAC,CAAC;;EAEhD;EACA,MAAME,aAAa,GAAG,IAAIzB,EAAE,CAACQ,GAAG,CAAC,CAAC;EAClCR,EAAE,CAACS,GAAG,CAACc,SAAS,EAAEE,aAAa,EAAEzB,EAAE,CAAC0B,WAAW,GAAG1B,EAAE,CAAC2B,eAAe,CAAC;;EAErE;EACA,MAAMC,eAAe,GAAG,IAAIC,UAAU,CAACJ,aAAa,CAACK,IAAI,CAAC;;EAE1D;EACA1B,GAAG,CAAC2B,MAAM,CAAC,CAAC;EACZxB,CAAC,CAACwB,MAAM,CAAC,CAAC;EACVlB,cAAc,CAACkB,MAAM,CAAC,CAAC;EACvBR,SAAS,CAACQ,MAAM,CAAC,CAAC;EAElB,OAAO,IAAIC,SAAS,CAACJ,eAAe,EAAEhB,IAAI,EAAED,IAAI,CAAC;AACnD,CAAC;AAED,eAAeV,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}